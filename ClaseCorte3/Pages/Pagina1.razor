@page "/pagina1clase"

@inject HttpClient _client;

@using System.Net.Http.Json
@using ClaseCorte3.Data

<MudButton OnClick="(args) => AgregarNuevoRegistro()" Variant="Variant.Filled" Color="Color.Primary">Añadir</MudButton>

<MudDataGrid T="Cliente" Items="@Clientes" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Cliente" Field="NombreCliente" Title="Id" IsEditable="false" />
        <Column T="Cliente" Field="NombreEmpresa" />
        <Column T="Cliente" Field="Compras" />
        <Column T="Cliente" Field="Credito"/>
        <Column T="Cliente" Field="descripcion" Title="Descripcion" />
        <Column T="Cliente" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=> EliminarLibroo(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>


@code {

    private IEnumerable<Cliente> Clientes = new List<Cliente>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List<Cliente>();
        _client.BaseAddress = new Uri(" https://localhost:7174/");

        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultaClientes");
        var respuesta = await _client.SendAsync(requestMessage);

        if(respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await respuesta.Content.ReadAsStringAsync();
            var listasCliente = System.Text.Json.JsonSerializer.Deserialize<List<Cliente>>(responseBody);
            Clientes = listasCliente;
        }

        
    }

    void EliminarLibroo(Cliente item)
    {
        
    }

    void AgregarNuevoRegistro()
    {
        var elemento = new Cliente
            {
                NombreCliente = "este no es",
                NombreEmpresa = "este no es",
                Compras = 3,
                Descripcion = "edewfw",
                Credito = 10,
            };
            ((List<Cliente>)Clientes).Add(elemento);
            StateHasChanged();
    }

    // events
    void StartedEditingItem(Cliente item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Cliente item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    //este servira para guardar o actualizar registros
    void CommittedItemChanges(Cliente item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    
}
